import TS_AOC2018:Day;
import TS_AOC2018:Support:ElfCPU;

class Day19 extends TS_AOC2018:Day
   method Day19();
   
   property string Description get;
   method SolvePart1() Returns string;
   method SolvePart2() Returns string;
   
end-class;

method Day19
   %Super = create TS_AOC2018:Day("TS_AOC_DAY19_INPUT");
   
   
end-method;



method SolvePart1
   /+ Returns String +/
   /+ Extends/implements TS_AOC2018:Day.SolvePart1 +/
   Local TS_AOC2018:Support:ElfCPU &cpu = create TS_AOC2018:Support:ElfCPU(%This.Lines);
   &cpu.RunProgram();
   Return String(&cpu.GetRegister(1));
end-method;

method SolvePart2
   /+ Returns String +/
   /+ Extends/implements TS_AOC2018:Day.SolvePart2 +/
   Local TS_AOC2018:Support:ElfCPU &cpu = create TS_AOC2018:Support:ElfCPU(%This.Lines);
   &cpu.SetRegister(1, 1);
   
   Local integer &lastSeenIP = &cpu.GetIP();
   While True
      &cpu.RunInstruction();
      If (&cpu.GetIP() > &lastSeenIP) Then
         &lastSeenIP = &cpu.GetIP();
      Else
         Break;
      End-If;
   End-While;
   
   Local number &largest = 0;
   Local integer &x;
   For &x = 1 To 6
      Local number &regVal = &cpu.GetRegister(&x);
      If (&regVal > &largest) Then
         &largest = &regVal;
      End-If;
   End-For;
   
   Local number &sum;
   For &x = 1 To &largest
      
      If (Mod(&largest, &x) = 0) Then
         &sum = &sum + &x;
      End-If;
      
   End-For;
   
   Return String(&sum);
end-method;

get Description
   /+ Returns String +/
   Return "Go With The Flow";
end-get;

